SHASH()   #
# Instalacja pakietów, jeśli potrzebne
install.packages(c("gamlss.dist", "nortest", "moments"))
# Załadowanie pakietów
library(gamlss.dist)
library(nortest)
library(moments)
# Ustawienia początkowe
set.seed(123)
n <- 100       # Liczność próby
mu <- 2        # Średnia rozkładu normalnego
sigma <- 1     # Odchylenie standardowe
taus <- seq(0.5, 2, by = 0.1)  # Przedział tau
n_sim <- 1000  # Liczba symulacji Monte Carlo
# Funkcja transformacji SAS
sinh_arcsinh <- function(x, tau) {
sinh(tau * asinh(x))
}
# Symulacje Monte Carlo dla funkcji mocy
power_results <- matrix(0, nrow = length(taus), ncol = 3)  # Moc dla każdego testu
for (i in seq_along(taus)) {
tau <- taus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
# Generowanie próby
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau)
# Test 1: Test Shapiro-Wilka
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
# Test 2: Test Anderson-Darlinga
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
# Test 3: Test Jarque-Bera
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
# Obliczanie mocy (średnia odrzuceń H0)
power_results[i, ] <- colMeans(rejections)
}
# Wykres funkcji mocy
plot(taus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(tau), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(taus, power_results[, 2], col = "blue", lwd = 2)
lines(taus, power_results[, 3], col = "green", lwd = 2)
legend("bottomright", legend = c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera"),
col = c("red", "blue", "green"), lwd = 2)
# Instalacja pakietów, jeśli potrzebne
install.packages(c("gamlss.dist", "nortest", "moments"))
# Załadowanie pakietów
library(gamlss.dist)
library(nortest)
library(moments)
# Ustawienia początkowe
set.seed(123)
n <- 100       # Liczność próby
mu <- 2        # Średnia rozkładu normalnego
sigma <- 1     # Odchylenie standardowe
taus <- seq(0.5, 2, by = 0.1)  # Przedział tau
n_sim <- 1000  # Liczba symulacji Monte Carlo
# Funkcja transformacji SAS
sinh_arcsinh <- function(x, tau) {
sinh(tau * asinh(x))
}
# Symulacje Monte Carlo dla funkcji mocy
power_results <- matrix(0, nrow = length(taus), ncol = 3)  # Moc dla każdego testu
for (i in seq_along(taus)) {
tau <- taus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
# Generowanie próby
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau)
# Test 1: Test Shapiro-Wilka
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
# Test 2: Test Anderson-Darlinga
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
# Test 3: Test Jarque-Bera
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
# Obliczanie mocy (średnia odrzuceń H0)
power_results[i, ] <- colMeans(rejections)
}
# Wykres funkcji mocy
plot(taus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(tau), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(taus, power_results[, 2], col = "blue", lwd = 2)
lines(taus, power_results[, 3], col = "green", lwd = 2)
legend("bottomright", legend = c("S-W", "A-D", "J-B"),
col = c("red", "blue", "green"), lwd = 2)
# Instalacja pakietów, jeśli potrzebne
install.packages(c("gamlss.dist", "nortest", "moments"))
# Załadowanie pakietów
library(gamlss.dist)
library(nortest)
library(moments)
# Ustawienia początkowe
set.seed(123)
n <- 100       # Liczność próby
mu <- 2        # Średnia rozkładu normalnego
sigma <- 1     # Odchylenie standardowe
taus <- seq(0.5, 2, by = 0.1)  # Przedział tau
n_sim <- 1000  # Liczba symulacji Monte Carlo
# Funkcja transformacji SAS
sinh_arcsinh <- function(x, tau) {
sinh(tau * asinh(x))
}
# Symulacje Monte Carlo dla funkcji mocy
power_results <- matrix(0, nrow = length(taus), ncol = 3)  # Moc dla każdego testu
for (i in seq_along(taus)) {
tau <- taus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
# Generowanie próby
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau)
# Test 1: Test Shapiro-Wilka
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
# Test 2: Test Anderson-Darlinga
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
# Test 3: Test Jarque-Bera
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
# Obliczanie mocy (średnia odrzuceń H0)
power_results[i, ] <- colMeans(rejections)
}
# Wykres funkcji mocy
plot(taus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(tau), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(taus, power_results[, 2], col = "blue", lwd = 2)
lines(taus, power_results[, 3], col = "green", lwd = 2)
legend("bottomright", legend = c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera"),
col = c("red", "blue", "green"), lwd = 2)
install.packages(c("gamlss.dist", "nortest", "moments"))
tau = 1
nus = seq(-2, 2, by = 0.1)
power_results <- matrix(0, nrow = length(taus), ncol = 3)
for (i in seq_along(nus)) {
nu <- nus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau, nu = nu)
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
#install.packages(c("gamlss.dist", "nortest", "moments"))
library(gamlss.dist)
library(nortest)
library(moments)
n <- 100
mu <- 2
sigma <- 1
taus <- seq(0.5, 2, by = 0.1)
n_sim <- 1000
sinh_arcsinh <- function(x, tau, nu=0) {
sinh(tau * (asinh(x) + nu)
}
#install.packages(c("gamlss.dist", "nortest", "moments"))
library(gamlss.dist)
library(nortest)
library(moments)
n <- 100
mu <- 2
sigma <- 1
nu <- 0
taus <- seq(0.5, 2, by = 0.1)
n_sim <- 1000
sinh_arcsinh <- function(x, tau, nu) {
sinh(tau * (asinh(x) + nu)
}
#install.packages(c("gamlss.dist", "nortest", "moments"))
library(gamlss.dist)
library(nortest)
library(moments)
n <- 100
mu <- 2
sigma <- 1
nu <- 0
taus <- seq(0.5, 2, by = 0.1)
n_sim <- 1000
sinh_arcsinh <- function(x, tau, nu) {
sinh(tau * (asinh(x) + nu)
}
#install.packages(c("gamlss.dist", "nortest", "moments"))
library(gamlss.dist)
library(nortest)
library(moments)
n <- 100
mu <- 2
sigma <- 1
nu <- 0
taus <- seq(0.5, 2, by = 0.1)
n_sim <- 1000
sinh_arcsinh <- function(x, tau, nu) {
sinh(tau * (asinh(x) + nu))
}
power_results <- matrix(0, nrow = length(taus), ncol = 3)
for (i in seq_along(taus)) {
tau <- taus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau)
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
#install.packages(c("gamlss.dist", "nortest", "moments"))
library(gamlss.dist)
library(nortest)
library(moments)
n <- 100
mu <- 2
sigma <- 1
nu <- 0
taus <- seq(0.5, 2, by = 0.1)
n_sim <- 1000
sinh_arcsinh <- function(x, tau, nu) {
sinh(tau * (asinh(x) + nu))
}
power_results <- matrix(0, nrow = length(taus), ncol = 3)
for (i in seq_along(taus)) {
tau <- taus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau, nu = nu)
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
plot(taus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(tau), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(taus, power_results[, 2], col = "blue", lwd = 2)
lines(taus, power_results[, 3], col = "green", lwd = 2)
legend("bottomright", legend = c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera"),
col = c("red", "blue", "green"), lwd = 2)
#install.packages(c("gamlss.dist", "nortest", "moments"))
library(gamlss.dist)
library(nortest)
library(moments)
n <- 100
mu <- 2
sigma <- 1
nu <- 0
taus <- seq(0.5, 2, by = 0.1)
n_sim <- 1000
sinh_arcsinh <- function(x, tau, nu) {
sinh(tau * (asinh(x) + nu))
}
power_results <- matrix(0, nrow = length(taus), ncol = 3)
for (i in seq_along(taus)) {
tau <- taus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau, nu = nu)
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
plot(taus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(tau), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(taus, power_results[, 2], col = "blue", lwd = 2)
lines(taus, power_results[, 3], col = "green", lwd = 2)
legend("bottomright", legend = c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera"),
col = c("red", "blue", "green"), lwd = 2)
tau <- 1
nus <- seq(-2, 2, by = 0.1)
power_results <- matrix(0, nrow = length(taus), ncol = 3)
for (i in seq_along(nus)) {
nu <- nus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau, nu = nu)
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
tau <- 1
nus <- seq(-2, 2, by = 0.1)
power_results <- matrix(0, nrow = length(nus), ncol = 3)
for (i in seq_along(nus)) {
nu <- nus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau, nu = nu)
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
plot(nus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(tau), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(taus, power_results[, 2], col = "blue", lwd = 2)
tau <- 1
nus <- seq(-2, 2, by = 0.1)
power_results <- matrix(0, nrow = length(nus), ncol = 3)
for (i in seq_along(nus)) {
nu <- nus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau, nu = nu)
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
plot(nus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(nu), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(nus, power_results[, 2], col = "blue", lwd = 2)
lines(nus, power_results[, 3], col = "green", lwd = 2)
legend("bottomright", legend = c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera"),
col = c("red", "blue", "green"), lwd = 2)
power_results
plot(nus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(nu), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(nus, power_results[, 2], col = "blue", lwd = 2)
lines(nus, power_results[, 3], col = "green", lwd = 2)
legend("topright", legend = c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera"),
col = c("red", "blue", "green"), lwd = 2)
tau <- 1
nus <- seq(-2, 2, by = 0.1)
power_results <- matrix(0, nrow = length(nus), ncol = 3)
for (i in seq_along(nus)) {
nu <- nus[i]
rejections <- matrix(0, nrow = n_sim, ncol = 3)
for (j in 1:n_sim) {
sample <- rnorm(n, mean = mu, sd = sigma)
transformed_sample <- sinh_arcsinh(sample, tau = tau, nu = nu)
rejections[j, 1] <- ifelse(shapiro.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 2] <- ifelse(ad.test(transformed_sample)$p.value < 0.05, 1, 0)
rejections[j, 3] <- ifelse(jarque.test(transformed_sample)$p.value < 0.05, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
plot(nus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(nu), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(nus, power_results[, 2], col = "blue", lwd = 2)
lines(nus, power_results[, 3], col = "green", lwd = 2)
legend("topright", legend = c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera"),
col = c("red", "blue", "green"), lwd = 2)
plot(nus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(nu), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(nus, power_results[, 2], col = "blue", lwd = 2)
lines(nus, power_results[, 3], col = "green", lwd = 2)
legend("topright", legend = c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera"),
col = c("red", "blue", "green"), lwd = 2)
nus <- seq(0.05, 20, by 0.05)
nus <- seq(0.05, 20, by = 0.05)
library(nortest)
library(tseries)
install.packages('tseries')
library(nortest)
library(tseries)
n <- 100
mc <- 1000
alpha <- 0.05
nus <- seq(0.05, 20, by = 0.05)
power_results <- matrix(0, nrow = length(nus), ncol = 3)
colnames(power_results) <- c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera")
for (i in seq_along(nu_values)) {
nu <- nus[i]
rejections <- matrix(0, nrow = B, ncol = 3)
for (j in 1:mc) {
Y <- rt(n, df = nu)
rejections[j, 1] <- ifelse(shapiro.test(Y)$p.value < alpha, 1, 0)
rejections[j, 2] <- ifelse(ad.test(Y)$p.value < alpha, 1, 0)
rejections[j, 3] <- ifelse(jarque.bera.test(Y)$p.value < alpha, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
library(nortest)
library(tseries)
n <- 100
mc <- 1000
alpha <- 0.05
nus <- seq(0.05, 20, by = 0.05)
power_results <- matrix(0, nrow = length(nus), ncol = 3)
colnames(power_results) <- c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera")
for (i in seq_along(nus)) {
nu <- nus[i]
rejections <- matrix(0, nrow = B, ncol = 3)
for (j in 1:mc) {
Y <- rt(n, df = nu)
rejections[j, 1] <- ifelse(shapiro.test(Y)$p.value < alpha, 1, 0)
rejections[j, 2] <- ifelse(ad.test(Y)$p.value < alpha, 1, 0)
rejections[j, 3] <- ifelse(jarque.bera.test(Y)$p.value < alpha, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
library(nortest)
library(tseries)
n <- 100
mc <- 1000
alpha <- 0.05
nus <- seq(0.05, 20, by = 0.05)
power_results <- matrix(0, nrow = length(nus), ncol = 3)
colnames(power_results) <- c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera")
for (i in seq_along(nus)) {
nu <- nus[i]
rejections <- matrix(0, nrow = mc, ncol = 3)
for (j in 1:mc) {
Y <- rt(n, df = nu)
rejections[j, 1] <- ifelse(shapiro.test(Y)$p.value < alpha, 1, 0)
rejections[j, 2] <- ifelse(ad.test(Y)$p.value < alpha, 1, 0)
rejections[j, 3] <- ifelse(jarque.bera.test(Y)$p.value < alpha, 1, 0)
}
power_results[i, ] <- colMeans(rejections)
}
plot(nu_values, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(nu), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
---
title: "raport"
plot(nus, power_results[, 1], type = "l", col = "red", lwd = 2,
xlab = expression(nu), ylab = "Moc testu",
main = "Funkcja mocy dla różnych testów")
lines(nus, power_results[, 2], col = "blue", lwd = 2)
lines(nus, power_results[, 3], col = "green", lwd = 2)
legend("topright", legend = c("Shapiro-Wilk", "Anderson-Darling", "Jarque-Bera"),
col = c("red", "blue", "green"), lwd = 2)
